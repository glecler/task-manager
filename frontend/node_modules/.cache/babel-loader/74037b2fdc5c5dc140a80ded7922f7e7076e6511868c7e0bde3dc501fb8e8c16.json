{"ast":null,"code":"var _jsxFileName = \"/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js\",\n  _s = $RefreshSig$();\nimport { Box, Select, TextInput } from 'grommet';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewTask({\n  onClose,\n  onCreateTask\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Status:\", /*#__PURE__*/_jsxDEV(Select, {\n        value: status,\n        onChange: ({\n          option\n        }) => setStatus(option),\n        options: ['To Do', 'In Progress', 'Done']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Description:\", /*#__PURE__*/_jsxDEV(TextInput, {\n        value: description,\n        onChange: event => setDescription(event.target.value),\n        placeholder: \"type here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConfirmCreateTask,\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n}\n_s(NewTask, \"H86p/Vw1+4dLI7+PavJvV4DHDbY=\");\n_c = NewTask;\nvar _c;\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["Box","Select","TextInput","React","useState","jsxDEV","_jsxDEV","NewTask","onClose","onCreateTask","_s","status","setStatus","description","setDescription","handleConfirmCreateTask","console","log","children","value","onChange","option","options","fileName","_jsxFileName","lineNumber","columnNumber","event","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js"],"sourcesContent":["import { Box, Select, TextInput } from 'grommet';\nimport React, { useState } from 'react';\n\nexport default function NewTask({ onClose, onCreateTask }) {\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n\n\treturn (\n\t\t<Box>\n      <label>\n        Status:\n          <Select value={status} onChange={({option}) => setStatus(option)} options={['To Do', 'In Progress', 'Done']}/>\n      </label>\n      <label>\n        Description:\n\t\t\t\t\t<TextInput value={description} onChange={event => setDescription(event.target.value)} placeholder=\"type here\" />\n      </label>\n      <button onClick={handleConfirmCreateTask}>Create Task</button>\n      <button onClick={onClose}>Cancel</button>\n    </Box>\n  );\n}\n\n"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,SAAS,QAAQ,SAAS;AAChD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,OAAOA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMW,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAIJ,MAAM,IAAIE,WAAW,EAAE;MACzBJ,YAAY,CAACE,MAAM,EAAEE,WAAW,CAAC;MACjCL,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAEF,oBACCX,OAAA,CAACN,GAAG;IAAAkB,QAAA,gBACAZ,OAAA;MAAAY,QAAA,GAAO,SAEH,eAAAZ,OAAA,CAACL,MAAM;QAACkB,KAAK,EAAER,MAAO;QAACS,QAAQ,EAAEA,CAAC;UAACC;QAAM,CAAC,KAAKT,SAAS,CAACS,MAAM,CAAE;QAACC,OAAO,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3G,CAAC,eACRpB,OAAA;MAAAY,QAAA,GAAO,cAER,eAAAZ,OAAA,CAACJ,SAAS;QAACiB,KAAK,EAAEN,WAAY;QAACO,QAAQ,EAAEO,KAAK,IAAIb,cAAc,CAACa,KAAK,CAACC,MAAM,CAACT,KAAK,CAAE;QAACU,WAAW,EAAC;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxG,CAAC,eACRpB,OAAA;MAAQwB,OAAO,EAAEf,uBAAwB;MAAAG,QAAA,EAAC;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9DpB,OAAA;MAAQwB,OAAO,EAAEtB,OAAQ;MAAAU,QAAA,EAAC;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV;AAAChB,EAAA,CA3BuBH,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}