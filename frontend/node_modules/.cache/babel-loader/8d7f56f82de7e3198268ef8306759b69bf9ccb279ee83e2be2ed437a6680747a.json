{"ast":null,"code":"var _jsxFileName = \"/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js\",\n  _s = $RefreshSig$();\nimport { Box } from 'grommet';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewTask({\n  isOpen,\n  onClose,\n  onCreateTask\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: `modal ${isOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Status:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: status,\n        onChange: e => setStatus(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: description,\n        onChange: e => setDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConfirmCreateTask,\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n}\n_s(NewTask, \"H86p/Vw1+4dLI7+PavJvV4DHDbY=\");\n_c = NewTask;\nvar _c;\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["Box","React","useState","jsxDEV","_jsxDEV","NewTask","isOpen","onClose","onCreateTask","_s","status","setStatus","description","setDescription","handleConfirmCreateTask","console","log","className","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js"],"sourcesContent":["import { Box } from 'grommet';\nimport React, { useState } from 'react';\n\nexport default function NewTask({ isOpen, onClose, onCreateTask }) {\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n\n\treturn (\n\t\t<Box className={`modal ${isOpen ? 'open' : ''}`}>\n      <label>\n        Status:\n          <input type=\"text\" value={status} onChange={(e) => setStatus(e.target.value)} />\n      </label>\n      <label>\n        Description:\n\t\t\t\t\t<input type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\n      </label>\n      <button onClick={handleConfirmCreateTask}>Create Task</button>\n      <button onClick={onClose}>Cancel</button>\n    </Box>\n  );\n}\n\n"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,SAAS;AAC7B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,OAAOA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMY,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAIJ,MAAM,IAAIE,WAAW,EAAE;MACzBJ,YAAY,CAACE,MAAM,EAAEE,WAAW,CAAC;MACjCL,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAEF,oBACCZ,OAAA,CAACJ,GAAG;IAACiB,SAAS,EAAG,SAAQX,MAAM,GAAG,MAAM,GAAG,EAAG,EAAE;IAAAY,QAAA,gBAC5Cd,OAAA;MAAAc,QAAA,GAAO,SAEH,eAAAd,OAAA;QAAOe,IAAI,EAAC,MAAM;QAACC,KAAK,EAAEV,MAAO;QAACW,QAAQ,EAAGC,CAAC,IAAKX,SAAS,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,eACRvB,OAAA;MAAAc,QAAA,GAAO,cAER,eAAAd,OAAA;QAAOe,IAAI,EAAC,MAAM;QAACC,KAAK,EAAER,WAAY;QAACS,QAAQ,EAAGC,CAAC,IAAKT,cAAc,CAACS,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClF,CAAC,eACRvB,OAAA;MAAQwB,OAAO,EAAEd,uBAAwB;MAAAI,QAAA,EAAC;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9DvB,OAAA;MAAQwB,OAAO,EAAErB,OAAQ;MAAAW,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV;AAAClB,EAAA,CA3BuBJ,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}