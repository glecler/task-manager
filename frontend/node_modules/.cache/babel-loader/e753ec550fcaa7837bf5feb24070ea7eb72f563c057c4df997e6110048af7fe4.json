{"ast":null,"code":"const BASE_URL = 'http://localhost:8080';\nconst changeTaskStatus = (task, status) => {\n  const newTask = {\n    status\n  };\n  fetch(BASE_URL + '/itemsstatus/' + task.id.toString(), {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newTask)\n  }).then(response => response).catch(error => console.error('Error updating task:', error));\n};\nconst editTask = (task, description) => {\n  const newTask = {\n    description\n  };\n  fetch(BASE_URL + '/items/' + task.id.toString(), {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newTask)\n  }).then(response => response).catch(error => console.error('Error updating task:', error));\n};\nconst deleteTask = task => {\n  fetch(BASE_URL + '/items/' + task.id.toString(), {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response).catch(error => console.error('Error deleting task:', error));\n};\nconst createTask = (status, description) => {\n  if (status && description) {\n    const newTask = {\n      status,\n      description\n    };\n    return fetch(BASE_URL + '/items', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    }).then(response => response.json()).catch(error => console.error('Error creating task:', error));\n  } else {\n    console.log('Task creation canceled or invalid input.');\n  }\n};\nconst getTasks = () => {\n  return fetch(BASE_URL + '/items').then(response => response.json()).catch(error => console.error('Error fetching items:', error));\n};\nexport { getTasks, createTask, editTask, deleteTask, changeTaskStatus };","map":{"version":3,"names":["BASE_URL","changeTaskStatus","task","status","newTask","fetch","id","toString","method","headers","body","JSON","stringify","then","response","catch","error","console","editTask","description","deleteTask","createTask","json","log","getTasks"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080'\n\nconst changeTaskStatus = (task, status) => {\n\n\tconst newTask = { status };\n\n\tfetch(BASE_URL + '/itemsstatus/' + task.id.toString(), {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(newTask),\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error updating task:', error));\n};\n\nconst editTask = ( task, description ) => {\n\n\tconst newTask = { description };\n\n\tfetch(BASE_URL + '/items/' + task.id.toString(), {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(newTask),\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error updating task:', error));\n};\n\nconst deleteTask = (task) => {\n\tfetch(BASE_URL + '/items/'+task.id.toString(), {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error deleting task:', error));\n};\n\nconst createTask = (status, description) => {\n\n\tif (status && description) {\n\n\t\tconst newTask = { status, description };\n\n\t\treturn(fetch(BASE_URL + '/items', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(newTask),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.catch(error => console.error('Error creating task:', error))\n\t\t);\n\t} else {\n\t\tconsole.log('Task creation canceled or invalid input.');\n\t}\n};\n\nconst getTasks = () => {\n\treturn(fetch(BASE_URL + '/items')\n\t\t.then(response => response.json())\n\t\t.catch(error => console.error('Error fetching items:', error))\n\t);\n};\n\nexport { getTasks, createTask, editTask, deleteTask, changeTaskStatus}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,MAAMC,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAE1C,MAAMC,OAAO,GAAG;IAAED;EAAO,CAAC;EAE1BE,KAAK,CAACL,QAAQ,GAAG,eAAe,GAAGE,IAAI,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE;IACtDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;EAC7B,CAAC,CAAC,CACAS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAC1BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,MAAME,QAAQ,GAAGA,CAAEhB,IAAI,EAAEiB,WAAW,KAAM;EAEzC,MAAMf,OAAO,GAAG;IAAEe;EAAY,CAAC;EAE/Bd,KAAK,CAACL,QAAQ,GAAG,SAAS,GAAGE,IAAI,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE;IAChDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;EAC7B,CAAC,CAAC,CACAS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAC1BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,MAAMI,UAAU,GAAIlB,IAAI,IAAK;EAC5BG,KAAK,CAACL,QAAQ,GAAG,SAAS,GAACE,IAAI,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE;IAC9CC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB;EACD,CAAC,CAAC,CACAI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAC1BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,MAAMK,UAAU,GAAGA,CAAClB,MAAM,EAAEgB,WAAW,KAAK;EAE3C,IAAIhB,MAAM,IAAIgB,WAAW,EAAE;IAE1B,MAAMf,OAAO,GAAG;MAAED,MAAM;MAAEgB;IAAY,CAAC;IAEvC,OAAOd,KAAK,CAACL,QAAQ,GAAG,QAAQ,EAAE;MACjCQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;IAC7B,CAAC,CAAC,CACAS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CACjCP,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAE/D,CAAC,MAAM;IACNC,OAAO,CAACM,GAAG,CAAC,0CAA0C,CAAC;EACxD;AACD,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACtB,OAAOnB,KAAK,CAACL,QAAQ,GAAG,QAAQ,CAAC,CAC/Ba,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CACjCP,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;AAEhE,CAAC;AAED,SAASQ,QAAQ,EAAEH,UAAU,EAAEH,QAAQ,EAAEE,UAAU,EAAEnB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}