{"ast":null,"code":"const BASE_URL='http://localhost:8080';const changeTaskStatus=(task,status)=>{const newTask={status};return fetch(BASE_URL+'/itemsstatus/'+task.id.toString(),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(newTask)}).then(response=>response).catch(error=>console.error('Error updating task:',error));};const editTask=(task,description)=>{const newTask={description};return fetch(BASE_URL+'/items/'+task.id.toString(),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(newTask)}).then(response=>response).catch(error=>console.error('Error updating task:',error));};const deleteTask=task=>{return fetch(BASE_URL+'/items/'+task.id.toString(),{method:'DELETE',headers:{'Content-Type':'application/json'}}).then(response=>response).catch(error=>console.error('Error deleting task:',error));};const createTask=(status,description,tags)=>{console.log(\"other tags\",tags);if(status&&description&&tags){const newTask={status,description,tags};return fetch(BASE_URL+'/items',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newTask)}).then(response=>response.json()).catch(error=>console.error('Error creating task:',error));}else{console.log('Task creation canceled or invalid input.');}};const getTasks=()=>{return fetch(BASE_URL+'/items').then(response=>response.json()).catch(error=>console.error('Error fetching items:',error));};export{getTasks,createTask,editTask,deleteTask,changeTaskStatus};","map":{"version":3,"names":["BASE_URL","changeTaskStatus","task","status","newTask","fetch","id","toString","method","headers","body","JSON","stringify","then","response","catch","error","console","editTask","description","deleteTask","createTask","tags","log","json","getTasks"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080'\n\nconst changeTaskStatus = (task, status) => {\n\n\tconst newTask = { status };\n\n\treturn(fetch(BASE_URL + '/itemsstatus/' + task.id.toString(), {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(newTask),\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error updating task:', error))\n\t);\n};\n\nconst editTask = ( task, description ) => {\n\n\tconst newTask = { description };\n\n\treturn(fetch(BASE_URL + '/items/' + task.id.toString(), {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(newTask),\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error updating task:', error))\n\t);\n};\n\nconst deleteTask = (task) => {\n\treturn(fetch(BASE_URL + '/items/'+task.id.toString(), {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t})\n\t\t.then(response => response)\n\t\t.catch(error => console.error('Error deleting task:', error))\n\t);\n};\n\nconst createTask = (status, description, tags) => {\n\tconsole.log(\"other tags\", tags);\n\tif (status && description && tags) {\n\n\t\tconst newTask = { status, description, tags };\n\n\t\treturn(fetch(BASE_URL + '/items', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(newTask),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.catch(error => console.error('Error creating task:', error))\n\t\t);\n\t} else {\n\t\tconsole.log('Task creation canceled or invalid input.');\n\t}\n};\n\nconst getTasks = () => {\n\treturn(fetch(BASE_URL + '/items')\n\t\t.then(response => response.json())\n\t\t.catch(error => console.error('Error fetching items:', error))\n\t);\n};\n\nexport { getTasks, createTask, editTask, deleteTask, changeTaskStatus}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}