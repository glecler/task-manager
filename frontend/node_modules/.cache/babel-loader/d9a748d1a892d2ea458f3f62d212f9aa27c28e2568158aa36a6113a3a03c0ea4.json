{"ast":null,"code":"var _jsxFileName = \"/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js\",\n  _s = $RefreshSig$();\nimport { Box, Select, TextInput, FormField, Button } from 'grommet';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewTask({\n  onClose,\n  onCreateTask\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: {\n      max: \"50%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(FormField, {\n      label: \"Status\",\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        value: status,\n        onChange: ({\n          option\n        }) => setStatus(option),\n        options: ['To Do', 'In Progress', 'Done']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      label: \"Description\",\n      children: /*#__PURE__*/_jsxDEV(TextInput, {\n        value: description,\n        onChange: event => setDescription(event.target.value),\n        placeholder: \"type here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Create Task\",\n      onClick: handleConfirmCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Cancel\",\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n}\n_s(NewTask, \"H86p/Vw1+4dLI7+PavJvV4DHDbY=\");\n_c = NewTask;\nvar _c;\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["Box","Select","TextInput","FormField","Button","React","useState","jsxDEV","_jsxDEV","NewTask","onClose","onCreateTask","_s","status","setStatus","description","setDescription","handleConfirmCreateTask","console","log","width","max","children","label","value","onChange","option","options","fileName","_jsxFileName","lineNumber","columnNumber","event","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/components/NewTask.js"],"sourcesContent":["import { Box, Select, TextInput, FormField, Button } from 'grommet';\nimport React, { useState } from 'react';\n\nexport default function NewTask({ onClose, onCreateTask }) {\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleConfirmCreateTask = () => {\n    if (status && description) {\n      onCreateTask(status, description);\n      onClose();\n    } else {\n      console.log('Invalid input.');\n    }\n  };\n\n\treturn (\n\t\t<Box width={{max:\"50%\"}}>\n      <FormField label=\"Status\">\n          <Select value={status} onChange={({option}) => setStatus(option)} options={['To Do', 'In Progress', 'Done']}/>\n      </FormField>\n      <FormField label=\"Description\">\n\t\t\t\t\t<TextInput value={description} onChange={event => setDescription(event.target.value)} placeholder=\"type here\" />\n      </FormField>\n      <Button label=\"Create Task\" onClick={handleConfirmCreateTask}/>\n      <Button label=\"Cancel\" onClick={onClose}/>\n    </Box>\n  );\n}\n\n"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,QAAQ,SAAS;AACnE,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,OAAOA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMW,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAIJ,MAAM,IAAIE,WAAW,EAAE;MACzBJ,YAAY,CAACE,MAAM,EAAEE,WAAW,CAAC;MACjCL,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAEF,oBACCX,OAAA,CAACR,GAAG;IAACoB,KAAK,EAAE;MAACC,GAAG,EAAC;IAAK,CAAE;IAAAC,QAAA,gBACpBd,OAAA,CAACL,SAAS;MAACoB,KAAK,EAAC,QAAQ;MAAAD,QAAA,eACrBd,OAAA,CAACP,MAAM;QAACuB,KAAK,EAAEX,MAAO;QAACY,QAAQ,EAAEA,CAAC;UAACC;QAAM,CAAC,KAAKZ,SAAS,CAACY,MAAM,CAAE;QAACC,OAAO,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvG,CAAC,eACZvB,OAAA,CAACL,SAAS;MAACoB,KAAK,EAAC,aAAa;MAAAD,QAAA,eAC/Bd,OAAA,CAACN,SAAS;QAACsB,KAAK,EAAET,WAAY;QAACU,QAAQ,EAAEO,KAAK,IAAIhB,cAAc,CAACgB,KAAK,CAACC,MAAM,CAACT,KAAK,CAAE;QAACU,WAAW,EAAC;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpG,CAAC,eACZvB,OAAA,CAACJ,MAAM;MAACmB,KAAK,EAAC,aAAa;MAACY,OAAO,EAAElB;IAAwB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/DvB,OAAA,CAACJ,MAAM;MAACmB,KAAK,EAAC,QAAQ;MAACY,OAAO,EAAEzB;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAACnB,EAAA,CAzBuBH,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}