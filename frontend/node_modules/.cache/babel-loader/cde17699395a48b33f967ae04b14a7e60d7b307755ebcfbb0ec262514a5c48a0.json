{"ast":null,"code":"var _jsxFileName = \"/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Box, PageHeader, Grommet } from 'grommet';\nimport NewTask from './components/NewTask.js';\nimport TaskBoard from './components/TaskBoard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [item, setItem] = useState(null);\n  useEffect(() => {\n    // Function to fetch the item from the server\n    const fetchItem = async () => {\n      try {\n        // Assuming your server endpoint for fetching a single item is http://localhost:8080/item/1\n        const serverEndpoint = 'http://localhost:8080/items';\n        const response = await fetch(serverEndpoint);\n        if (!response.ok) {\n          throw new Error('Failed to fetch items');\n        }\n        const data = await response.json();\n        // Set the fetched item in the state\n        setItem(data);\n      } catch (error) {\n        console.error('Error fetching item:', error.message);\n      }\n    };\n\n    // Call the fetchItem function when the component mounts\n    fetchItem();\n  }, []); // Empty dependency array means this effect runs once after the first render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grommet, {\n      children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: \"medium\",\n        gap: \"medium\",\n        children: [/*#__PURE__*/_jsxDEV(NewTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J5MFcpuA8so9sJ2d7BMdQD7RvSM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Box","PageHeader","Grommet","NewTask","TaskBoard","jsxDEV","_jsxDEV","App","_s","item","setItem","fetchItem","serverEndpoint","response","fetch","ok","Error","data","json","error","console","message","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","margin","gap","_c","$RefreshReg$"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Box, PageHeader, Grommet } from 'grommet';\nimport NewTask from './components/NewTask.js';\nimport TaskBoard from './components/TaskBoard.js';\n\nfunction App() {\n\t\n\tconst [item, setItem] = useState(null);\n\n\tuseEffect(() => {\n    // Function to fetch the item from the server\n    const fetchItem = async () => {\n      try {\n        // Assuming your server endpoint for fetching a single item is http://localhost:8080/item/1\n        const serverEndpoint = 'http://localhost:8080/items';\n\n        const response = await fetch(serverEndpoint);\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch items');\n        }\n\n        const data = await response.json();\n        // Set the fetched item in the state\n        setItem(data);\n      } catch (error) {\n        console.error('Error fetching item:', error.message);\n      }\n    };\n\n    // Call the fetchItem function when the component mounts\n    fetchItem();\n  }, []); // Empty dependency array means this effect runs once after the first render\n\n  return (\n    <div className=\"App\">\n\t\t\t<Grommet>\n\t\t\t\t<PageHeader title=\"Task Manager\"/>\n\t\t\t\t<Box margin=\"medium\" gap=\"medium\">\n\t\t\t\t\t<NewTask/>\n\t\t\t\t\t<TaskBoard/>\n\t\t\t\t</Box>\t\n\t\t</Grommet>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,EAAEC,OAAO,QAAQ,SAAS;AAClD,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,SAAS,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACb;IACA,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,cAAc,GAAG,6BAA6B;QAEpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,cAAc,CAAC;QAE5C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC;QACAR,OAAO,CAACO,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACtD;IACF,CAAC;;IAED;IACAV,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,eACrBjB,OAAA,CAACJ,OAAO;MAAAqB,QAAA,gBACPjB,OAAA,CAACL,UAAU;QAACuB,KAAK,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAClCtB,OAAA,CAACN,GAAG;QAAC6B,MAAM,EAAC,QAAQ;QAACC,GAAG,EAAC,QAAQ;QAAAP,QAAA,gBAChCjB,OAAA,CAACH,OAAO;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACVtB,OAAA,CAACF,SAAS;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpB,EAAA,CAxCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}