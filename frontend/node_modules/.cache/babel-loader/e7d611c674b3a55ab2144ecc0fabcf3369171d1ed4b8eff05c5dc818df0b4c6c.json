{"ast":null,"code":"var _jsxFileName = \"/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Box, PageHeader, Grommet } from 'grommet';\nimport TaskBoard from './components/TaskBoard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n  const handleClickCreateTask = () => {\n    setIsModalOPen(true);\n  };\n  const handleCloseModal = () => {\n    // Reset state and close the modal\n    setStatus('');\n    setDescription('');\n    setIsModalOpen(false);\n  };\n  const handleConfirmCreateTask = (status, description) => {\n    if (status && description) {\n      const newTask = {\n        status,\n        description\n      };\n      fetch('http://localhost:8080/items', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      }).then(response => response.json()).then(data => {\n        // Update the state with the new task\n        setTasks([...tasks, data]);\n      }).catch(error => console.error('Error creating task:', error));\n      setStatus('');\n      setDescription('');\n      setIsModalOpen(false);\n    } else {\n      // Handle case where user cancels the prompt or inputs are empty\n      console.log('Task creation canceled or invalid input.');\n    }\n  };\n  useEffect(() => {\n    // Fetch items from the server\n    fetch('http://localhost:8080/items').then(response => response.json()).then(data => setTasks(data)).catch(error => console.error('Error fetching items:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grommet, {\n      children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: \"medium\",\n        gap: \"medium\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClickCreateTask,\n          children: \" New Task \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {\n          tasks: tasks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O1HZqWZihYQbNTceYBVp5ye/qRA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Box","PageHeader","Grommet","TaskBoard","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","isModalOpen","setIsModalOpen","status","setStatus","description","setDescription","handleClickCreateTask","setIsModalOPen","handleCloseModal","handleConfirmCreateTask","newTask","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","log","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","margin","gap","onClick","_c","$RefreshReg$"],"sources":["/Users/gregoirelecler/Documents/GoblinModeCoding/task-manager/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Box, PageHeader, Grommet } from 'grommet';\nimport TaskBoard from './components/TaskBoard.js';\n\nfunction App() {\n\t\n\tconst [tasks, setTasks] = useState(null);\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n\n\tconst handleClickCreateTask = () => {\n\t\tsetIsModalOPen(true);\n\t}\n\n\tconst handleCloseModal = () => {\n    // Reset state and close the modal\n    setStatus('');\n    setDescription('');\n    setIsModalOpen(false);\n  };\n\n\tconst handleConfirmCreateTask = (status, description) => {\n\n\t\t\tif (status && description) {\n      \n\t\t\t\tconst newTask = { status, description };\n      \n\t\t\t\tfetch('http://localhost:8080/items', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(newTask),\n\t\t\t\t})\n\t\t\t\t.then(response => response.json())\n        .then(data => {\n          // Update the state with the new task\n          setTasks([...tasks, data]);\n        })\n        .catch(error => console.error('Error creating task:', error));\n\t\t\tsetStatus('');\n      setDescription('');\n      setIsModalOpen(false);\n    } else {\n      // Handle case where user cancels the prompt or inputs are empty\n      console.log('Task creation canceled or invalid input.');\n    }\n  };\n\n\n\tuseEffect(() => {\n\t\t\t// Fetch items from the server\n\t\t\tfetch('http://localhost:8080/items')\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => setTasks(data))\n\t\t\t\t.catch(error => console.error('Error fetching items:', error));\n  }, []);\n\n  return (\n    <div className=\"App\">\n\t\t\t<Grommet>\n\t\t\t\t<PageHeader title=\"Task Manager\"/>\n\t\t\t\t<Box margin=\"medium\" gap=\"medium\">\n\t\t\t\t\t<button onClick={handleClickCreateTask}> New Task </button>\n\t\t\t\t\t<TaskBoard tasks={tasks} />\n\t\t\t\t</Box>\t\n\t\t</Grommet>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}